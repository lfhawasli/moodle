<?php
// This file is part of the UCLA shared theme for Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Reorder and modify the navigation.
 *
 * @package   theme_uclashared
 * @copyright 2018 UC Regents
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace theme_uclashared;
defined('MOODLE_INTERNAL') || die();

/**
 * Adds/remove/rearranges nodes in navigation drawer.
 *
 * Borrows a lot of code from: https://moodle.org/plugins/local_boostnavigation.
 *
 * @package   theme_uclashared
 * @copyright 2018 UC Regents
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class modify_navigation {

    /**
     * Holds sections that should have js to collapse/expand.
     *
     * @var array
     */
    private $collapsenodesforjs = array();

    /**
     * Course node to add elements at the end.
     *
     * @var navigation_node
     */
    private $_coursenode = null;

    /**
     * Moodle's navigation tree.
     *
     * @var global_navigation
     */
    private $navigation = null;

    /**
     * Flag to track whether divider is displayed after course sections.
     *
     * @var boolean
     */
    private $showdividercalled = false;

    /**
     * Magic getter.
     *
     * @param string $name
     * @return mixed
     */
    public function __get($name) {
        global $COURSE;
        if ($name == 'coursenode') {
            if (!isset($this->_coursenode)) {
                $this->_coursenode = $this->navigation->find($COURSE->id, \navigation_node::TYPE_COURSE);
            }
            return $this->_coursenode;
        }
    }

    /**
     * Adds the auto-generated Activities/Resources section.
     */
    private function add_activityresources() {
        global $CFG, $COURSE;

        // See if we should show Activities/Resources section.
        $format = course_get_format($COURSE);
        if (($format->get_format() != 'ucla')) {
            return;
        }
        $formatoptions = $format->get_format_options();
        if (!empty($formatoptions['hide_autogenerated_content'])) {
            return;
        }

        // See if there are any modules.
        $modnamesplural = get_module_types_names(true);
        $modnamesused = get_fast_modinfo($COURSE->id)->get_used_module_names();

        // We don't bother displaying labels because they don't have an index.
        if (isset($modnamesused['label'])) {
            unset($modnamesused['label']);
        }

        if (empty($modnamesused)) {
            return;
        }

        // Create activities/resources course node. Flat node so it.
        $activitiesnode = \navigation_node::create(get_string('activitiesresources', 'theme_uclashared'),
                new \moodle_url('/course/view.php', array('id' => $COURSE->id)), // We have to add a URL to the course node,
                                                                                // otherwise the node wouldn't be added to
                                                                                // the flat navigation by Boost.
                                                                                // There is no better choice than the course
                                                                                // home page.
                \global_navigation::TYPE_CUSTOM,
                null,
                'themeuclasharedactivities',
                null);
        // Prevent that the activities course node is marked as active and added to the breadcrumb when showing the
        // course home page.
        $activitiesnode->make_inactive();
        $activitiesnode->isexpandable = true;

        // Get the user preference for the collapse state of the activities node and set the collapse and hidden
        // node attributes of the activity nodes accordingly. At the same time, reallocate the parent of the
        // existing section nodes.
        $userprefactivitiesnode = get_user_preferences('theme_uclashared-collapse_'.
                'themeuclasharedactivitiesnode', 0);
        if ($userprefactivitiesnode == 1) {
            $activitiesnode->collapse = true;
        } else {
            $activitiesnode->collapse = false;
        }

        // Add the activities node to the end of the course navigation.
        // If activities node is to be displayed as a new flat nav block
        if ($this->showdividercalled === false) {
            $activitiesnode = new \flat_navigation_node($activitiesnode, 0);
            $activitiesnode->set_showdivider(true);
            $this->showdividercalled = true;
        }
        $activitiesnode = $this->coursenode->add_node($activitiesnode);

        // Create an activity course node for each activity type.
        foreach ($modnamesused as $mod => $name) {
            $modpath = '/mod/' . $mod . '/index.php';
            if (file_exists($CFG->dirroot . $modpath)) {

                $modnode = \navigation_node::create($modnamesplural[$mod],
                        new \moodle_url('/mod/'.$mod.'/index.php', array('id' => $COURSE->id)),
                        \global_navigation::TYPE_ACTIVITY,
                        null,
                        'themeuclasharedactivity'.$mod,
                        new \pix_icon('icon', '', $mod));

                if ($userprefactivitiesnode == 1) {
                    $modnode->hidden = true;
                } else {
                    $modnode->hidden = false;
                }

                // Add the activity course node to the coursehome node.
                $this->coursenode->add_node($modnode);

                // Need to set parent only after adding it.
                $modnode->set_parent($activitiesnode);
            }
        }

        // Make activities collapsible.
        $this->collapsenodesforjs[] = 'themeuclasharedactivities';
    }

    /**
     * Add link to media resources.
     */
    private function add_mediaresources() {
        global $COURSE;

        $params['course'] = $COURSE;

        $mediaresourcenode = block_method_result('ucla_media', 'get_navigation_nodes', $params);
        if (!empty($mediaresourcenode)) {
            // If media resources node is to be displayed as a new flat nav block.
            if ($this->showdividercalled === false) {
                $mediaresourcenode = new \flat_navigation_node($mediaresourcenode, 0);
                $mediaresourcenode->set_showdivider(true);
                $this->showdividercalled = true;
            }
            $this->coursenode->add_node($mediaresourcenode);
        }
    }

    /**
     * Add link to Library reserves.
     */
    private function add_libraryreserves() {
        global $COURSE;

        $params['course'] = $COURSE;

        $libraryreserves = block_method_result('ucla_library_reserves', 'get_navigation_nodes', $params);
        if (!empty($libraryreserves)) {
            // Iterate the array if multiple library reserves are to be displayed.
            foreach ($libraryreserves as $libraryreservenode) {
                // If library reserve node is to be displayed as a new flat nav block.
                if ($this->showdividercalled === false) {
                    $libraryreservenode = new \flat_navigation_node($libraryreservenode, 0);
                    $libraryreservenode->set_showdivider(true);
                    $this->showdividercalled = true;
                }
                $this->coursenode->add_node($libraryreservenode);
            }
        }
    }

    /**
     * Add More section.
     */
    private function add_more() {
        global $COURSE;

        // See if we should show More section.
        $format = course_get_format($COURSE);
        if (($format->get_format() != 'ucla')) {
            return;
        }

        // Create More Section node. Flat node so it.
        $morenode = \navigation_node::create(get_string('moresection', 'theme_uclashared'),
                new \moodle_url('/course/view.php', array('id' => $COURSE->id)), // We have to add a URL to the course node,
                                                                                // otherwise the node wouldn't be added to
                                                                                // the flat navigation by Boost.
                                                                                // There is no better choice than the course
                                                                                // home page.
                \global_navigation::TYPE_CUSTOM,
                null,
                'themeuclasharedmore',
                null);
        // Prevent that the more section node is marked as active and added to the breadcrumb when showing the
        // course home page.
        $morenode->make_inactive();
        $morenode->isexpandable = true;

        // Get the user preference for the collapse state of the more section node and set the collapse and hidden
        // node attributes of the more section node accordingly. At the same time, reallocate the parent of the
        // existing section nodes.
        $userprefmorenode = get_user_preferences('theme_uclashared-collapse_'.
                'themeuclasharedmorenode', 1);
        if ($userprefmorenode == 1) {
            $morenode->collapse = true;
        } else {
            $morenode->collapse = false;
        }

        // Add the more section node.
        $this->coursenode->add_node($morenode);

        // $params is used as a parameter to send to the blocks which generate the nav nodes
        $params['course'] = $COURSE;

        // Add library reserve guide node.
        $librarynode = block_method_result('ucla_library_portal', 'get_navigation_nodes', $params);
        if (!empty($librarynode)) {
            // The node is wrapped in an array returned by get_navigation_nodes().

            if ($userprefmorenode == 1) {
                $librarynode->hidden = true;
            } else {
                $librarynode->hidden = false;
            }

            // Add the library node to the coursehome node.
            $this->coursenode->add_node($librarynode);

            // Need to set parent only after adding it.
            $librarynode->set_parent($morenode);
        }

        // Add subject area nodes.
        $subjectlinks = block_method_result('ucla_subject_links', 'get_navigation_nodes', $params);
        if (!empty($subjectlinks)) {
            // Iterate the array if multiple subject links are to be displayed
            foreach ($subjectlinks as $subjectlinknode) {
                if ($userprefmorenode == 1) {
                    $subjectlinknode->hidden = true;
                } else {
                    $subjectlinknode->hidden = false;
                }

                // Add the library node to the coursehome node.
                $this->coursenode->add_node($subjectlinknode);

                // Need to set parent only after adding it.
                $subjectlinknode->set_parent($morenode);
            }
        }

        // Add MyEngineering node.
        $myengineeringnode = block_method_result('ucla_myengineer', 'get_navigation_nodes', $params);
        if (!empty($myengineeringnode)) {
            // The node is wrapped in an array returned by get_navigation_nodes().
            $myengineeringnode = $myengineeringnode[0];

            if ($userprefmorenode == 1) {
                $myengineeringnode->hidden = true;
            } else {
                $myengineeringnode->hidden = false;
            }

            // Add the library node to the coursehome node.
            $this->coursenode->add_node($myengineeringnode);

            // Need to set parent only after adding it.
            $myengineeringnode->set_parent($morenode);
        }

        // Make more section collapsible.
        $this->collapsenodesforjs[] = 'themeuclasharedmore';
    }

    /**
     * Check if the page is editable and the user has editing permissions.
     * If button is to be displayed for the conditions, return true, otherwise false.
     * Currently checks if the page is grader page, course section page or syllabus section page.
     *
     * @return boolean
     */
    public function is_editing_button_displayed() {
        global $PAGE;

        return (!($PAGE->url->compare(new \moodle_url('/grade/report/grader/index.php'), URL_MATCH_BASE)) &&
                !($PAGE->user_allowed_editing() &&
                ($PAGE->url->compare(new \moodle_url('/course/view.php'), URL_MATCH_BASE) ||
                $PAGE->url->compare(new \moodle_url('/local/ucla_syllabus/index.php'), URL_MATCH_BASE))));
    }

    /**
     * Add link to Admin panel page, see CCLE-7193.
     */
    private function add_courseadmin() {
        global $PAGE;

        if (is_enrolled($PAGE->context) || has_capability('moodle/course:view', $PAGE->context)) {
            $adminurl = new \moodle_url('/course/format/ucla/admin_panel.php',
                    array('courseid' => $PAGE->course->id));
            $courseadmin = \navigation_node::create(get_string('adminpanel', 'format_ucla'),
                        $adminurl, \navigation_node::TYPE_SETTING,
                        null, 'courseadministration', new \pix_icon('i/settings', ''));

            // If editing button is not displayed, courseadmin becomes a new tree parent
            if ($this->is_editing_button_displayed()) {
                $courseadmin = new \flat_navigation_node($courseadmin, 0);
                $courseadmin->set_showdivider(true);
            }
            $this->coursenode->add_node($courseadmin);
        }
    }

    /**
     * Add Turn editing on/off.
     */
    private function add_editingmode() {
        global $PAGE, $USER;

        // Exit function if not on an editable page or if does not have permission to edit
        if ($this->is_editing_button_displayed()) {
            return;
        }

        // If on grader page, editing button should mirror for grader
        if ($PAGE->url->compare(new \moodle_url('/grade/report/grader/index.php'), URL_MATCH_BASE)) {
            // Code below is copied from /grade/report/grader/index.php
            // Lines 32, 67-68, 93-109

            $page = optional_param('page', 0, PARAM_INT);   // active page
            // return tracking object
            $gpr = new \grade_plugin_return(array('type'=>'report', 'plugin'=>'grader', 'courseid'=>$PAGE->course->id, 'page'=>$page));

            // page params for the turn editing on
            $options = $gpr->get_options();
            $options['sesskey'] = sesskey();

            if ($USER->gradeediting[$PAGE->course->id]) {
                $options['edit'] = 0;
                $editingmode = true;
            } else {
                $options['edit'] = 1;
                $editingmode = false;
            }
            $editurl = new \moodle_url('index.php', $options);

        } else {
            // If user can edit the page
            if ($PAGE->user_allowed_editing()) {
                // Add the turn on/off settings.
                if ($PAGE->url->compare(new \moodle_url('/course/view.php'), URL_MATCH_BASE)) {
                    // We are on the course page, retain the current page params e.g. section.
                    $baseurl = clone($PAGE->url);
                    $baseurl->param('sesskey', sesskey());
                } else {
                    // Edit on the main course page.
                    $baseurl = new \moodle_url('/course/view.php',
                            array('id' => $PAGE->course->id,
                                  'return' => $PAGE->url->out_as_local_url(false),
                                  'sesskey' => sesskey()));
                }

                $editurl = clone($baseurl);
                if ($PAGE->user_is_editing()) {
                    $editurl->param('edit', 'off');
                    $editingmode = true;
                } else {
                    $editurl->param('edit', 'on');
                    $editingmode = false;
                }
            }
        }

        // Set button label and icon depending on editing mode
        if ($editingmode === true) {
            $editstring = get_string('turneditingoff');
            $editicon = 'e/tick';
        } else {
            $editstring = get_string('turneditingon');
            $editicon = 'i/edit';
        }

        // Create flat nav node so we can set divider.
        $turneditingon = new \flat_navigation_node(\navigation_node::create($editstring, $editurl,
                \navigation_node::TYPE_SETTING,
                null, 'editingmode', new \pix_icon($editicon, '')), 0);
        $turneditingon->set_showdivider(true);
        $this->coursenode->add_node($turneditingon);
    }

    /**
     * Add Show all node if using UCLA format.
     */
    private function add_show_all() {
        global $COURSE, $PAGE;

        // See if we should show Activities/Resources section.
        $format = course_get_format($COURSE);
        if (($format->get_format() != 'ucla')) {
            return;
        }

        $showallurl = new \moodle_url('/course/view.php',
                array('id' => $PAGE->course->id, 'show_all' => 1));
        $showall = \navigation_node::create(get_string('show_all', 'format_ucla'),
                    $showallurl, \navigation_node::TYPE_SECTION,
                    null, 'showall', null);

        $this->coursenode->add_node($showall);
    }

    /**
     * Adds link to UCLA syllabus if on a course type that supports it.
     */
    private function add_syllabus() {
        global $CFG;
        // Add node for syllabus (if needed).
        include_once($CFG->dirroot . '/local/ucla_syllabus/locallib.php');
        if (class_exists('ucla_syllabus_manager')) {
            global $COURSE;
            $uclasyllabusmanager = new \ucla_syllabus_manager($COURSE);
            $syllabusnode = $uclasyllabusmanager->get_navigation_nodes();
            if (!empty($syllabusnode)) {
                // Found node, so add to course before first section.               
                $siteinfonode = null;
                $children = $this->coursenode->get_children_key_list();
                // Find 1st child that is an integer.
                foreach ($children as $child) {
                    if (intval($child) !== 0) {
                        $siteinfonode = $child;
                        break;
                    }
                }
                $this->coursenode->add_node($syllabusnode, $siteinfonode);
            }
        }
    }

    /**
     * Changes or removes icons for certain nodes.
     */
    private function change_icons() {
        global $PAGE;

        $nodestochange['participants']['type'] = \global_navigation::TYPE_CONTAINER;
        $nodestochange['participants']['icon'] = new \pix_icon('i/users', get_string('participants'));
        foreach ($nodestochange as $name => $nodeinfo) {
            if ($node = $this->navigation->find($name, $nodeinfo['type'])) {
                $node->icon = $nodeinfo['icon'];
            }
        }

        // The settingsnav is not set if we are purging caches.
        @$settingsnav = $PAGE->settingsnav; // Supress NOTICE when purging caches.
        if (empty($settingsnav)) {
            return;
        }

        // Add gear icon to Site administration. Treat separately since it is
        // harder to find.
        // Code from lib/navigationlib.php:flat_navigation->initialise().
        $admin = $settingsnav->find('siteadministration', \global_navigation::TYPE_SITE_ADMIN);
        if (!$admin) {
            // Try again - crazy nav tree!
            $admin = $settingsnav->find('root', \global_navigation::TYPE_SITE_ADMIN);
        }
        if ($admin) {
            $admin->icon = new \pix_icon('t/preferences', get_string('administrationsite'));
        }
    }

    /**
     * Rearrange nodes.
     */
    private function rearrange_nodes() {
        $nodestomove = array('grades' => \global_navigation::TYPE_SETTING,
            'participants' => \global_navigation::TYPE_CONTAINER);
        foreach ($nodestomove as $name => $type) {
            if ($node = $this->navigation->find($name, $type)) {
                $node->remove();
                $this->coursenode->add_node($node);
            }
        }
    }

    /**
     * Remove items we do not want.
     */
    private function remove_nodes() {
        $nodestoremove = array('badgesview' => \global_navigation::TYPE_SETTING,
            'competencies' => \global_navigation::TYPE_SETTING,
            'home' => \global_navigation::TYPE_ROOTNODE,
            'privatefiles' => \global_navigation::TYPE_SETTING,
            'calendar' => \global_navigation::TYPE_CUSTOM);

        foreach ($nodestoremove as $name => $type) {
            if ($node = $this->navigation->find($name, $type)) {
                $node->remove();
            }
        }

        // Next, we will need the mycourses node and the mycourses node children in any case and don't want to fetch them more
        // than once.
        $mycoursesnode = $this->navigation->find('mycourses', \global_navigation::TYPE_ROOTNODE);
        $mycourseschildrennodeskeys = $mycoursesnode->get_children_key_list();

        if ($mycoursesnode) {
            // Hide mycourses node.
            $mycoursesnode->showinflatnavigation = false;

            // Hide all courses below the mycourses node.
            foreach ($mycourseschildrennodeskeys as $k) {
                $mycoursesnode->get($k)->showinflatnavigation = false;
            }
        }
    }

    /**
     * Modifies Moodle navigation tree.
     *
     * Called from local/ucla/lib.php: local_ucla_extend_navigation().
     *
     * @param \global_navigation $navigation
     */
    public function run(\global_navigation $navigation) {
        global $PAGE;

        $this->navigation = $navigation;

        // Remove nodes.
        $this->remove_nodes();

        // Add nodes if on course.
        if ($PAGE->course->id != SITEID) {
            $this->add_syllabus();
            $this->add_show_all();
            $this->add_libraryreserves();
            $this->add_mediaresources();
            $this->add_activityresources();
            $this->add_more();
            $this->add_editingmode();
            $this->add_courseadmin();
        }

        // Rearrange items.
        $this->rearrange_nodes();

        // Change icons for nodes.
        $this->change_icons();

        // If at least one section needs to be collapsed.
        if (!empty($this->collapsenodesforjs)) {
            // Add JavaScript for collapsing nodes to the page.
            $PAGE->requires->js_call_amd('theme_uclashared/collapsenavdrawernodes', 'init', [$this->collapsenodesforjs]);
            // Allow updating the necessary user preferences via Ajax.
            foreach ($this->collapsenodesforjs as $node) {
                user_preference_allow_ajax_update('theme_uclashared-collapse_'.$node.'node', PARAM_BOOL);
            }
        }
    }
}
