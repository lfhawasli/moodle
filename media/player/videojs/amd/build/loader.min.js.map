{"version":3,"sources":["../src/loader.js"],"names":["firstLoad","language","setUp","lang","notifyVideoJS","Event","getLegacyEvents","done","events","document","on","FILTER_CONTENT_UPDATED","e","nodes","langStrings","getLanguageJson","find","addBack","each","index","element","id","attr","config","data","modulePromises","techOrder","indexOf","push","Promise","all","then","langJson","videojs","options","flash","swf","Config","wwwroot","addLanguage","catch","Notification","exception","cached","JSON","parse","LocalStorage","get","resolve","request","methodname","args","Ajax","call","result","set","stringify"],"mappings":"wOA0BA,OACA,OACA,OACA,OACA,OACA,O,6nCAKIA,CAAAA,C,CAKAC,C,CAQSC,CAAK,CAAG,SAACC,CAAD,CAAU,CAC3BF,CAAQ,CAAGE,CAAX,CACAH,CAAS,GAAT,CAEAI,CAAa,CAAC,IAAD,CAAO,cAAO,MAAP,CAAP,CAAb,CAEAC,UAAMC,eAAN,GAAwBC,IAAxB,CAA6B,SAACC,CAAD,CAAY,CACrC,cAAOC,QAAP,EAAiBC,EAAjB,CAAoBF,CAAM,CAACG,sBAA3B,CAAmDP,CAAnD,CACH,CAFD,CAGH,C,cAQKA,CAAAA,CAAa,CAAG,SAACQ,CAAD,CAAIC,CAAJ,CAAc,IAE1BC,CAAAA,CAAW,CAAGC,CAAe,EAFH,CAQhCF,CAAK,CAACG,IAAN,yBACKC,OADL,yBAEKD,IAFL,CAEU,cAFV,EAE0BE,IAF1B,CAE+B,SAACC,CAAD,CAAQC,CAAR,CAAoB,IACrCC,CAAAA,CAAE,CAAG,cAAOD,CAAP,EAAgBE,IAAhB,CAAqB,IAArB,CADgC,CAErCC,CAAM,CAAG,cAAOH,CAAP,EAAgBI,IAAhB,CAAqB,YAArB,CAF4B,CAGrCC,CAAc,CAAG,6SAAQ,0BAAR,mDAHoB,CAK3C,GAAIF,CAAM,CAACG,SAAP,EAA4D,CAAC,CAAzC,GAAAH,CAAM,CAACG,SAAP,CAAiBC,OAAjB,CAAyB,SAAzB,CAAxB,CAAoE,CAEhEF,CAAc,CAACG,IAAf,+SAA2B,4BAA3B,qDACH,CACD,GAAIL,CAAM,CAACG,SAAP,EAA0D,CAAC,CAAvC,GAAAH,CAAM,CAACG,SAAP,CAAiBC,OAAjB,CAAyB,OAAzB,CAAxB,CAAkE,CAE9DF,CAAc,CAACG,IAAf,qTAA2B,kCAA3B,2DACH,CACDC,OAAO,CAACC,GAAR,EAAahB,CAAb,SAA6BW,CAA7B,GACCM,IADD,CACM,WAAyB,cAAvBC,CAAuB,MAAbC,CAAa,MAC3B,GAAIjC,CAAJ,CAAe,CACXiC,CAAO,CAACC,OAAR,CAAgBC,KAAhB,CAAsBC,GAAtB,WAA+BC,UAAOC,OAAtC,+CACAL,CAAO,CAACM,WAAR,CAAoBtC,CAApB,CAA8B+B,CAA9B,EAEAhC,CAAS,GACZ,CACDiC,CAAO,CAACZ,CAAD,CAAKE,CAAL,CAEV,CAVD,EAWCiB,KAXD,CAWOC,UAAaC,SAXpB,CAYH,CA3BL,CA4BH,C,CAOK3B,CAAe,CAAG,UAAM,CAC1B,GAAM4B,CAAAA,CAAM,CAAGC,IAAI,CAACC,KAAL,CAAWC,UAAaC,GAAb,CAAiB,eAAjB,GAAqC,IAAhD,CAAf,CACA,GAAI9C,CAAQ,GAAI0C,CAAAA,CAAhB,CAAwB,CACpB,MAAOd,CAAAA,OAAO,CAACmB,OAAR,CAAgBL,CAAM,CAAC1C,CAAD,CAAtB,CACV,CAED,GAAMgD,CAAAA,CAAO,CAAG,CACZC,UAAU,CAAE,4BADA,CAEZC,IAAI,CAAE,CACFhD,IAAI,CAAEF,CADJ,CAFM,CAAhB,CAMA,MAAOmD,WAAKC,IAAL,CAAU,CAACJ,CAAD,CAAV,EAAqB,CAArB,EAAwBlB,IAAxB,CAA6B,SAAAuB,CAAM,CAAI,CAC1CX,CAAM,CAAC1C,CAAD,CAAN,CAAmB2C,IAAI,CAACC,KAAL,CAAWS,CAAX,CAAnB,CACAR,UAAaS,GAAb,CAAiB,eAAjB,CAAkCX,IAAI,CAACY,SAAL,CAAeb,CAAf,CAAlC,EAEA,MAAOA,CAAAA,CAAM,CAAC1C,CAAD,CAChB,CALM,CAMV,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Video JS loader.\n *\n * This takes care of applying the filter on content which was dynamically loaded.\n *\n * @module     media_videojs/loader\n * @package    media_videojs\n * @copyright  2016 Frédéric Massart - FMCorz.net\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Config from 'core/config';\nimport Event from 'core/event';\nimport jQuery from 'jquery';\nimport Ajax from 'core/ajax';\nimport LocalStorage from 'core/localstorage';\nimport Notification from 'core/notification';\n\n/**\n * Whether this is the first load of videojs module.\n */\nlet firstLoad;\n\n/**\n * The language that is used in the player\n */\nlet language;\n\n/**\n * Set-up.\n *\n * Adds the listener for the event to then notify video.js.\n * @param {string} lang Language to be used in the player\n */\nexport const setUp = (lang) => {\n    language = lang;\n    firstLoad = true;\n    // Notify Video.js about the nodes already present on the page.\n    notifyVideoJS(null, jQuery('body'));\n    // We need to call popover automatically if nodes are added to the page later.\n    Event.getLegacyEvents().done((events) => {\n        jQuery(document).on(events.FILTER_CONTENT_UPDATED, notifyVideoJS);\n    });\n};\n\n/**\n * Notify video.js of new nodes.\n *\n * @param {Event} e The event.\n * @param {NodeList} nodes List of new nodes.\n */\nconst notifyVideoJS = (e, nodes) => {\n    const selector = '.mediaplugin_videojs';\n    const langStrings = getLanguageJson();\n\n    // Find the descendants matching the expected parent of the audio and video\n    // tags. Then also addBack the nodes matching the same selector. Finally,\n    // we find the audio and video tags contained in those parents. Kind thanks\n    // to jQuery for the simplicity.\n    nodes.find(selector)\n        .addBack(selector)\n        .find('audio, video').each((index, element) => {\n            const id = jQuery(element).attr('id');\n            const config = jQuery(element).data('setup-lazy');\n            const modulePromises = [import('media_videojs/video-lazy')];\n\n            if (config.techOrder && config.techOrder.indexOf('youtube') !== -1) {\n                // Add YouTube to the list of modules we require.\n                modulePromises.push(import('media_videojs/Youtube-lazy'));\n            }\n            if (config.techOrder && config.techOrder.indexOf('flash') !== -1) {\n                // Add Flash to the list of modules we require.\n                modulePromises.push(import('media_videojs/videojs-flash-lazy'));\n            }\n            Promise.all([langStrings, ...modulePromises])\n            .then(([langJson, videojs]) => {\n                if (firstLoad) {\n                    videojs.options.flash.swf = `${Config.wwwroot}/media/player/videojs/videojs/video-js.swf`;\n                    videojs.addLanguage(language, langJson);\n\n                    firstLoad = false;\n                }\n                videojs(id, config);\n                return;\n            })\n            .catch(Notification.exception);\n        });\n};\n\n/**\n * Returns the json object of the language strings to be used in the player.\n *\n * @returns {Promise}\n */\nconst getLanguageJson = () => {\n    const cached = JSON.parse(LocalStorage.get('media_videojs') || '{}');\n    if (language in cached) {\n        return Promise.resolve(cached[language]);\n    }\n\n    const request = {\n        methodname: 'media_videojs_get_language',\n        args: {\n            lang: language\n        },\n    };\n    return Ajax.call([request])[0].then(result => {\n        cached[language] = JSON.parse(result);\n        LocalStorage.set('media_videojs', JSON.stringify(cached));\n\n        return cached[language];\n    });\n};\n"],"file":"loader.min.js"}