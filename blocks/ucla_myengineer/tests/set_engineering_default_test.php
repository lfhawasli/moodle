<?php
// This file is part of the UCLA MyEngineer plugin for Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Unit tests for event handler set_engineering_default.
 *
 * @package    block_ucla_myengineer
 * @category   test
 * @copyright  2014 UC Regents
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
defined('MOODLE_INTERNAL') || die();

global $CFG;

/**
 * PHPunit testcase class.
 *
 * @copyright  2014 UC Regents
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @group ucla
 * @group local_ucla
 */
class set_engineering_default_test extends advanced_testcase {

    /**
     * Build list of given classes and then will trigger the
     * 'course_creator_finished' event.
     *
     * @param array $classes An array of arrays that will be used as parameters
     *                       in the UCLA data generator create_class().
     * @return array $builtclasses  Results from create_class.
     */
    protected function build_classes($classes) {
        $builtclasses = array();

        foreach ($classes as $classparam) {
            $ucladatagen = $this->getDataGenerator()->get_plugin_generator('local_ucla');
            $createdclasses = $ucladatagen->create_class($classparam);
            $builtclasses = array_merge($builtclasses, $createdclasses);
        }

        // Trigger same event as when course creator is done.
        $eventdata = new stdClass();
        $eventdata->completed_requests = array();
        foreach ($builtclasses as $class) {
            $eventdata->completed_requests[make_idnumber($class)] = $class;
        }

        $event = \tool_uclacoursecreator\event\course_creator_finished::create(array(
            'other' => json_encode($eventdata)
        ));
        $event->trigger();

        return $builtclasses;
    }

    /**
     * Helper function. Checks if defaults are changed, such as format
     * hide_autogenerated_content setting and if recent_activity and
     * calendar_upcoming blocks are added.
     *
     * @param int $courseid
     * @param boolean $assertchanged    If true, will assert that settings are
     *                                  changed.
     */
    protected function defaults_changed($courseid, $assertchanged) {
        global $DB;

        // Check if course has "Do not display auto-generated links" and 
        // "Redirect grades link to MyUCLA" selected.
        $options = course_get_format($courseid)->get_format_options();
        if ($assertchanged) {
            $this->assertTrue((bool) $options['hide_autogenerated_content']);
            $this->assertTrue((bool) $options['myuclagradelinkredirect']);
        } else {
            $this->assertFalse((bool) $options['hide_autogenerated_content']);
            $this->assertFalse((bool) $options['myuclagradelinkredirect']);
        }

        // Check if recent_activity and calendar_upcoming blocks are added.
        $course = get_course($courseid);
        $context = context_course::instance($course->id);
        foreach (array('recent_activity', 'calendar_upcoming') as $blockname) {
            $installed = $DB->record_exists('block_instances',
                    array('blockname' => $blockname,
                          'parentcontextid' => $context->id,
                          'defaultregion' => BLOCK_POS_RIGHT));
            if ($assertchanged) {
                $this->assertTrue($installed);
            } else {
                $this->assertFalse($installed);
            }
        }

        // Verify that gradebook settings are changed.
        $settings = grade_get_settings($courseid);
        $settingstocheck = ['report_user_showgradeandpercentage', 'report_user_showrange',
            'report_user_showweight', 'report_user_showaverage', 'report_user_showlettergrade',
            'report_user_showcontributiontocoursetotal', 'report_user_rangedecimals',
            'report_user_showhiddenitems', 'report_user_showtotalsifcontainhidden'];
        if ($assertchanged) {
            foreach ($settingstocheck as $check) {
                $this->assertFalse((bool) $settings->$check);
            }
        } else {
            foreach ($settingstocheck as $check) {                
                // If unset, then will use site default setting.
                $this->assertFalse(property_exists($settings, $check));
            }
        }
        // Make sure that "Show feedback" is always unchanged from default.
        $this->assertFalse(property_exists($settings, 'report_user_showfeedback'));
    }

    /**
     * Setup.
     */
    public function setUp() {
        $this->resetAfterTest(false);
    }

    /**
     * Make sure that when building an engineering course that is cross-listed
     * it has default settings changed if it is the hostcourse.
     */
    public function test_building_crosslisted_host_engineering_course() {
        $class = $this->build_classes(array(array(
                array('division' => 'EN'),
                array('division' => 'PS'))));
        $course = reset($class);
        $this->defaults_changed($course->courseid, true);
    }

    /**
     * Make sure that when building an engineering course that is cross-listed
     * and is not the hostcourse, then it doesn't have default settings changed.
     */
    public function test_building_crosslisted_nothost_engineering_course() {
        $class = $this->build_classes(array(array(
                array('division' => 'PS'),
                array('division' => 'EN'))));
        $course = reset($class);
        $this->defaults_changed($course->courseid, false);
    }

    /**
     * Make sure that when an engineering course is built that it has the proper
     * settings.
     *
     * @group totest
     */
    public function test_building_engineering_course() {
        $class = $this->build_classes(array(array('division' => 'EN')));
        $course = reset($class);
        $this->defaults_changed($course->courseid, true);
    }

    /**
     * Make sure that if we built more than 1 engineering course, that each one
     * has its default settings changed.
     */
    public function test_multiple_engineering_course() {
        $tobuild = array();

        // Regular engineering course.
        $tobuild[] = array('division' => 'EN', 'subj_area' => 'COM SCI');

        // Regular non-engineering course.
        $tobuild[] = array('division' => 'HU', 'subj_area' => 'ASIAN');

        // Cross-listed engineering course.
        $tobuild[] = array(array('division' => 'EN', 'subj_area' => 'EL ENGR'),
                           array('division' => 'PS'));

        // Cross-listed, but non-engineering.
        $tobuild[] = array(array('division' => 'PS', 'subj_area' => 'MATH'),
                           array('division' => 'EN'));

        $classes = $this->build_classes($tobuild);
        foreach ($classes as $class) {
            // Ignore cross-listed records.
            if (empty($class->hostcourse)) {
                continue;
            }

            // If subject area is engineering. Results wouldn't have division.
            if ($class->department == 'COM SCI' || $class->department == 'EL ENGR') {
                $this->defaults_changed($class->courseid, true);
            } else {
                $this->defaults_changed($class->courseid, false);
            }
        }
    }
}
