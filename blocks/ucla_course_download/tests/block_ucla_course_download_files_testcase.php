<?php
// This file is part of the UCLA course download plugin for Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Testcase file.
 *
 * @package     block_ucla_course_download
 * @copyright   2014 UC Regents
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
defined('MOODLE_INTERNAL') || die();

// Include class we are testing.
global $CFG;
require_once($CFG->dirroot . '/blocks/ucla_course_download/classes/base.php');
require_once($CFG->dirroot . '/blocks/ucla_course_download/classes/files.php');

/**
 * Tests for the block_ucla_course_download_files class.
 *
 * @package    block_ucla_course_download
 * @copyright   2014 UC Regents
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class block_ucla_course_download_files_testcase extends advanced_testcase {
    /**
     * Test course.
     *
     * @var object
     */
    private $course = null;

    /**
     * Test student.
     *
     * @var object
     */
    private $student = null;

    /**
     * Test teacher.
     *
     * @var object
     */
    private $teacher = null;

    /**
     * Helper method to populate a course with a specified number of files and
     * options.
     *
     * @param array $contents   An array of arrays that will be used as the
     *                          $options parameter for mod_resource generator.
     * @return array            Will return the <sectionname>/<filename> created
     *                          for the corresponding index in the passed in
     *                          $content array.
     */
    private function populate_course(array $contents) {
        // Need to be logged in as someone with ability to add content.
        $this->setUser($this->teacher);

        // Get resource generator. It will be able to create actual files.
        $generator = $this->getDataGenerator()->get_plugin_generator('mod_resource');

        // First, make sure that course has all its sections created.
        $format = course_get_format($this->course);
        course_create_sections_if_missing($this->course,
                range(0, $format->get_course()->numsections));

        $totalfiles = 0;    // Tracks file name of autogenerated file.
        $retval = array();  // Used to assert files are queried properly.
        $sectionnames = array();    // Cache indexed by sectionid => name.
        foreach ($contents as $index => $options) {
            $generator->create_instance(array('course' => $this->course->id), $options);
            ++$totalfiles;
            // Generator creates files named like this.
            $sectionnum = 0;
            if (isset($options['section'])) {
                $sectionnum = $options['section'];
            }
            $sectionname = $format->get_section_name($sectionnum);
            $retval[$index] = $sectionname . '/resource' . $totalfiles . '.txt';
        }

        return $retval;
    }

    /**
     * Sets up test course and users.
     */
    public function setUp() {
        global $DB;
        $this->resetAfterTest(true);

        // Create test course and users.
        $this->course = $this->getDataGenerator()->create_course();
        $this->student = $this->getDataGenerator()->create_user();
        $this->teacher = $this->getDataGenerator()->create_user();

        // Get student and teacher roleids.
        $studentroleid = $DB->get_field('role', 'id', array('shortname' => 'student'));
        $teacherroleid = $DB->get_field('role', 'id', array('shortname' => 'teacher'));

        // Enroll users.
        $this->getDataGenerator()->enrol_user($this->student->id,
                $this->course->id, $studentroleid);
        $this->getDataGenerator()->enrol_user($this->teacher->id,
                $this->course->id, $teacherroleid);
    }

    /**
     * Test that an empty course will not generate a zip file.
     */
    public function test_empty_course() {
        // Test as a student and then teacher. Should both be the same.
        foreach (array('student', 'teacher') as $user) {
            $coursefiles = new block_ucla_course_download_files(
                    $this->course->id, $this->$user->id);

            // Shouldn't be able to make a request.
            $status = $coursefiles->get_request_status();
            $this->assertEquals('request_unavailable', $status);

            // But add request anyways and make sure class doesn't blow up.
            $result = $coursefiles->add_request();
            $this->assertTrue($result);

            $request = $coursefiles->get_request();
            $coursefiles->process_request($request);

            // TODO: When Moodle 2.6+ is integrated, make sure that email is not
            // sent out (http://docs.moodle.org/dev/Writing_PHPUnit_tests#Testing_sending_of_emails).

            // There shouldn't be any changes.
            $processedrequest = $coursefiles->get_request();
            foreach (array('fileid', 'contexthash', 'content', 'timeupdated') as $column) {
                $this->assertEquals($request->$column, $processedrequest->$column);
            }
        }
    }

    /**
     * Test creating a zip file for a course with a lot of content.
     */
    public function test_filled_course() {
        // Create as many number of file resources as the section number + 1.
        $contenttocreate = array();
        for ($section=0; $section<=$this->course->numsections; $section++) {
            // Plus 1, because we want something in "Site info".
            $numfiles = $section + 1;
            for ($i=0; $i<$numfiles; $i++) {
                $contenttocreate[] = array('section' => $section);
            }
        }
        $expectedfiles = $this->populate_course($contenttocreate);

        // Course should have lots of content now. Create and process request.
        $coursefiles = new block_ucla_course_download_files(
                $this->course->id, $this->teacher->id);
        
        $result = $coursefiles->add_request();
        $this->assertTrue($result);
        $initialrequest = $coursefiles->get_request();
        // Call to process_request modifies the parameter, so clone object.
        $coursefiles->process_request(clone $initialrequest);

        // Newly processed request should have proper fields set.
        $this->assertEquals('request_completed', $coursefiles->get_request_status());
        $processedrequest = $coursefiles->get_request();
        foreach (array('fileid', 'timeupdated') as $column) {
            $this->assertNotEquals($initialrequest->$column, $processedrequest->$column);
        }

        // Make sure that created zip has proper content in it.
        $ziparray = $coursefiles->build_zip_array();
        foreach ($expectedfiles as $expectedfile) {
            $this->assertArrayHasKey($expectedfile, $ziparray);
        }
    }

    /**
     * Tests that a course with the same content for 2 users will share the same
     * zip file.
     */
    public function test_same_content() {
        // Create content for course. Just add 1 file per section.
        $contenttocreate = array();
        for ($section=0; $section<=$this->course->numsections; $section++) {
            $contenttocreate[] = array('section' => $section);
        }
        $expectedfiles = $this->populate_course($contenttocreate);

        // Create request for teacher.
        $teacherdownload = new block_ucla_course_download_files($this->course->id, $this->teacher->id);
        $teacherdownload->add_request();
        $teacherrequest = $teacherdownload->get_request();
        $teacherdownload->process_request($teacherrequest);

        // Create request for student.
        $studentdownload = new block_ucla_course_download_files($this->course->id, $this->student->id);
        $studentdownload->add_request();
        $studentrequest = $studentdownload->get_request();
        $studentdownload->process_request($studentrequest);

        // Make sure that both requests share the same content.
        foreach (array('contexthash', 'content') as $column) {
            $this->assertEquals($teacherrequest->$column, $studentrequest->$column);
        }

        // Make sure that the file both requests point to has the same hash.
        $fs = get_file_storage();
        $teacherfile = $fs->get_file_by_id($teacherrequest->fileid);
        $studentfile = $fs->get_file_by_id($studentrequest->fileid);
        $this->assertEquals($teacherfile->get_contenthash(), $studentfile->get_contenthash());
    }
}
